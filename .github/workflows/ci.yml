name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}  

permissions:
  contents: read

jobs:
  lint:
    name: Lint (golangci-lint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.59.1
          args: --timeout=5m

  test:
    name: Test (unit + integration)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: emailback
          POSTGRES_USER: emailback
          POSTGRES_PASSWORD: changeme
        options: >-
          --health-cmd="pg_isready -U emailback -d emailback"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20
    env:
      DB_HOST: localhost
      DB_PORT: "5432"
      DB_USER: emailback
      DB_PASSWORD: changeme
      DB_NAME: emailback
      REDIS_ADDR: localhost:6379
      REDIS_PASSWORD: ""
      REDIS_DB: "0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Install Postgres client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        env:
          PGPASSWORD: changeme
        run: |
          for i in {1..60}; do
            pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" && break
            sleep 1
          done
          pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER"

      - name: Run migrations
        env:
          PGPASSWORD: changeme
        run: |
          set -e
          if [ -d "db/migrations" ]; then
            for f in $(ls db/migrations/*_*.up.sql | sort); do
              echo "Applying migration: $f"
              psql "host=$DB_HOST port=$DB_PORT user=$DB_USER dbname=$DB_NAME sslmode=disable" -f "$f"
            done
          else
            echo "No migrations directory db/migrations found, skipping."
          fi

      - name: Test with coverage
        run: |
          go test ./... -covermode=atomic -coverprofile=coverage.out
          go tool cover -func=coverage.out | tail -n1

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out
          if-no-files-found: warn

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.out
          flags: unittests
          fail_ci_if_error: false
          verbose: true

  build:
    name: Docker build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: emailback:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}

  security:
    name: Security scan (Trivy)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (for scan)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: emailback:test

      - name: Install Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'emailback:test'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'